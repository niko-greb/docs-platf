# ==============================================================
# 📘 Docs-as-Code CI
# Автоматическая проверка документации при push в main и в PR в main.
#
# Особенности:
# - Проверяет ТОЛЬКО документационные файлы: .md, .adoc, .yaml, .yml
# - Использует контейнер docs-cli:ci для изолированной среды
# - В PR — работает в soft mode (не ломает CI), но публикует отчёт
# - В push в main — должен ломать CI при ошибках (если SOFT_MODE=false в скрипте)
# - Публикует логи как артефакты и комментарий в PR
# ==============================================================

name: 🧱 Docs-as-Code CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



jobs:
  docs-validate:
    name: 🧩 Validate Documentation
    runs-on: ubuntu-latest
    # В PR допускаем "успех" даже при ошибках (soft mode),
    # но в push — CI должен падать (предполагается, что run-linters.sh
    # управляет exit code в зависимости от SOFT_MODE).
    continue-on-error: ${{ github.event_name == 'pull_request' }}

    steps:
      # ─────────────────────────────────────────────
      # 1️⃣ Клонируем репозиторий с полной историей
      # ─────────────────────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 — чтобы работало origin/main...HEAD в PR
          # (альтернатива: fetch-depth: 2 + явный fetch origin/main)
          fetch-depth: 0

      # ─────────────────────────────────────────────
      # 2️⃣ Собираем Docker-образ с линтерами
      # ─────────────────────────────────────────────
      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .repo/Dockerfile
          load: true   # загружаем образ в локальный docker
          tags: docs-cli:ci
          push: false  # не пушим в registry

      # ─────────────────────────────────────────────
      # 3️⃣ Запуск валидации только для релевантных файлов
      # ─────────────────────────────────────────────
      - name: 🚀 Run Docs-as-Code Validation
        id: run_linters
        run: |
          echo "🔍 Determining changed documentation files..."

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📦 Mode: Pull Request → comparing with origin/main"
            # Используем трёхточечный diff для PR
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(md|adoc|ya?ml)$' || true)
          else
            echo "📦 Mode: Push → checking files in current commit"
            # Для push — только файлы в коммите
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -E '\.(md|adoc|ya?ml)$' || true)
          fi

          echo "📄 Changed docs files:"
          if [ -z "$CHANGED_FILES" ]; then
            echo "  (none)"
            echo "✅ No documentation files to validate."
            exit 0
          else
            echo "$CHANGED_FILES" | sed 's/^/  - /'
          fi

          # Передаём список файлов через переменную окружения
          docker run --rm \
            -v "$PWD":/work \
            -w /work \
            -e CHANGED_FILES="$CHANGED_FILES" \
            docs-cli:ci bash .repo/ci/scripts/run-linters.sh

      # ─────────────────────────────────────────────
      # 4️⃣ Сохраняем логи как артефакты (всегда)
      # ─────────────────────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/
          retention-days: 7

      # ─────────────────────────────────────────────
      # 5️⃣ Генерация краткого отчёта для комментария PR
      # ─────────────────────────────────────────────
      - name: 🧾 Generate PR comment summary
        if: github.event_name == 'pull_request'
        run: |
          summarize() {
            local file="$1"
            local title="$2"
            echo "**${title}**"
            if [[ -f "$file" && -s "$file" ]]; then
              echo '```text'
              head -n 50 "$file"
              echo '```'
            else
              echo "_No issues detected_"
            fi
            echo ""
          }

          {
            echo "## 🧩 Docs-as-Code CI Results"
            echo ""
            echo "> ℹ️ This report shows linting results for changed documentation files."
            echo ""
            summarize artifacts/markdownlint.log "Markdown (markdownlint)"
            summarize artifacts/asciidoc.log "AsciiDoc (asciidoctor)"
            summarize artifacts/openapi.log "OpenAPI (Spectral)"
            summarize artifacts/vale.log "Style & Terminology (Vale)"
          } > summary.md

      # ─────────────────────────────────────────────
      # 6️⃣ Публикация комментария в PR (только для PR!)
      # ─────────────────────────────────────────────
      - name: 💬 Post comment to Pull Request
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          # Уникальный заголовок для обновления существующего комментария
          header: docs-lint
          # Читаем содержимое файла и передаём напрямую в message
          message: |
            ${{ steps.read_summary.outputs.content }}
        env:
          # Убеждаемся, что файл существует
          SUMMARY_PATH: summary.md

      # ─────────────────────────────────────────────
      # 7️⃣ Вспомогательный шаг: читаем summary.md в output
      # ─────────────────────────────────────────────
      - name: 🔍 Read summary content for PR comment
        id: read_summary
        if: github.event_name == 'pull_request'
        run: |
          if [ -f "summary.md" ]; then
            # Многострочный output через heredoc-синтаксис
            echo "content<<EOF" >> "$GITHUB_OUTPUT"
            cat summary.md >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "content=⚠️ Failed to generate summary." >> "$GITHUB_OUTPUT"
          fi

          # ─────────────────────────────────────────────
      


      # ─────────────────────────────────────────────
      # 6️⃣ Генерация HTML и публикация на GitHub Pages
      # ─────────────────────────────────────────────
      - name: 🧱 Generate HTML documentation
        if: github.event_name == 'push'
        run: docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
          doctoolchain . generateHTML -PconfigFile=.repo/config/docToolchainConfig.groovy

      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html5