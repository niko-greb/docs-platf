name: 🧱 Docs-as-Code CI (Soft Mode)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validate:
    name: 🧩 Validate Documentation
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      # ───────────────────────────────
      # 1️⃣ Checkout & Docker Build
      # ───────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ───────────────────────────────
      # 2️⃣ Markdownlint
      # ───────────────────────────────
      - name: 🧾 Run Markdown Linter (via npx)
        run: |
          mkdir -p artifacts
          echo "🧾 Running Markdown Linter..."

          docker run --rm \
            -v "${{ github.workspace }}/docs":/docs \
            docs-cli:ci bash -lc '
              set +e
              cd /docs
              echo "📂 Working dir: $(pwd)"
              echo "📄 Files in /docs:"
              find . -type f -name "*.md" -maxdepth 2
              echo ""
              echo "🔎 Checking markdownlint-cli2..."
              npx markdownlint-cli2 --version || echo "⚠️ markdownlint-cli2 not found"
              echo ""
              echo "🚀 Running markdownlint..."
              npx markdownlint-cli2 "**/*.md" "#node_modules" --format markdown
              CODE=$?
              echo "🔚 Exit code: $CODE"
              exit 0
            ' 2>&1 | tee artifacts/markdownlint.log

          echo "📋 Markdownlint results:"
          cat artifacts/markdownlint.log || echo "⚠️ No lint output generated"





      # ───────────────────────────────
      # 3️⃣ Asciidoctor
      # ───────────────────────────────
      - name: 🏗️ Validate AsciiDoc files
        run: |
          echo "🏗️ Running Asciidoctor Doctest..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            FILES=$(find . -type f -name "*.adoc" | wc -l)
            if [ "$FILES" -eq 0 ]; then
              echo "⚠️ No AsciiDoc files found — skipping"
              exit 0
            fi
            find . -type f -name "*.adoc" -print0 | xargs -0 -n1 asciidoctor-doctest 2>&1 || true
          ' | tee -a artifacts/asciidoc.log

      # ───────────────────────────────
      # 4️⃣ Spectral (OpenAPI)
      # ───────────────────────────────
      - name: 🔍 Validate OpenAPI specs
        run: |
          echo "🔍 Running Spectral..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            FILES=$(find . -type f \( -name "*.yaml" -o -name "*.yml" \) | wc -l)
            if [ "$FILES" -eq 0 ]; then
              echo "⚠️ No YAML files found — skipping"
              exit 0
            fi
            find . -type f \( -name "*.yaml" -o -name "*.yml" \) -print0 | xargs -0 -n1 spectral lint --quiet 2>&1 || true
          ' | tee -a artifacts/openapi.log

      # ───────────────────────────────
      # 5️⃣ Vale (style)
      # ───────────────────────────────
      - name: ✍️ Run Vale style checks
        run: |
          echo "✍️ Running Vale..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            FILES=$(find . -type f \( -name "*.md" -o -name "*.adoc" \) | wc -l)
            if [ "$FILES" -eq 0 ]; then
              echo "⚠️ No documentation files found — skipping"
              exit 0
            fi
            vale --output=line --minAlertLevel=warning . 2>&1 || true
          ' | tee -a artifacts/vale.log

      # ───────────────────────────────
      # 6️⃣ Collect & Summarize
      # ───────────────────────────────
      - name: 📊 Summarize results in artifact
        if: always()
        run: |
          echo "🧾 Merging logs..."
          mkdir -p artifacts
          cat artifacts/*.log > artifacts/docs-quality.log || true

      - name: 📎 Upload Linter Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/docs-quality.log

      # ───────────────────────────────
      # 7️⃣ GitHub Summary (Warnings)
      # ───────────────────────────────
      - name: ⚠️ Generate Warning Summary
        if: always()
        run: |
          echo "⚙️ Creating GitHub Summary..."
          echo "## 🧾 Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -s artifacts/docs-quality.log ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "MD|Vale|WARN|ERROR|Error|warning|error|Spectral" artifacts/docs-quality.log | head -n 200 >> $GITHUB_STEP_SUMMARY || echo "✅ No warnings found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No warnings found" >> $GITHUB_STEP_SUMMARY
          fi

      # ───────────────────────────────
      # 8️⃣ PR Comment
      # ───────────────────────────────
      - name: 💬 Comment Results in PR
        if: always() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-ci-report
          message: |
            🧾 **Documentation CI Report**
            ```
            $(cat artifacts/docs-quality.log || echo "✅ No warnings found")
            ```
