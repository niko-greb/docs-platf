name: 🧱 Docs-as-Code CI

# ─────────────────────────────────────────────
# 🔔 Триггеры запуска
# ─────────────────────────────────────────────
on:
  push:
    branches: [ main ]      # запускаем при пуше в main → обновляем GitHub Pages
  pull_request:
    branches: [ main ]      # при PR → только валидация (линтеры и сборка, без деплоя)
  workflow_dispatch:         # ручной запуск из вкладки Actions
    inputs:
      skip_lint:
        description: "Пропустить линтеры (только для теста деплоя)"
        required: false
        default: "false"

# ─────────────────────────────────────────────
# ⚙️ Глобальные настройки
# ─────────────────────────────────────────────
permissions:
  contents: write            # нужно для публикации в GitHub Pages
  pull-requests: write       # нужно для комментариев в PR
  pages: write               # публикация GitHub Pages
  id-token: write

concurrency:
  group: "docs-ci"
  cancel-in-progress: false

# ─────────────────────────────────────────────
# 🧩 Основная job: линтеры + сборка + деплой
# ─────────────────────────────────────────────
jobs:
  docs-pipeline:
    name: 🧩 Validate & Deploy Docs
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: docs-cli:ci

    steps:
      # ─────────────────────────────
      # 1️⃣ Получаем код
      # ─────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # нужно, чтобы видеть diff при PR

      # ─────────────────────────────
      # 2️⃣ Собираем Docker образ
      # ─────────────────────────────
      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .repo/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}

      # ─────────────────────────────
      # 3️⃣ Запуск линтеров (Docs-as-Code)
      # ─────────────────────────────
      - name: 🚀 Run Docs-as-Code Validation
        if: ${{ github.event_name != 'push' || inputs.skip_lint != 'true' }}
        id: run_linters
        run: |
          echo "🔧 Collecting changed files..."

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📦 Mode: Pull Request"
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(md|adoc|ya?ml)$' || true)
          else
            echo "📦 Mode: Push"
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -E '\.(md|adoc|ya?ml)$' || true)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "✅ No documentation changes detected."
            exit 0
          fi

          docker run --rm \
            -v "$PWD":/work \
            -w /work \
            -e CHANGED_FILES="$CHANGED_FILES" \
            ${{ env.DOCKER_IMAGE }} \
            bash .repo/ci/scripts/run-linters.sh

      # ─────────────────────────────
      # 4️⃣ Публикуем отчёты линтеров как артефакты
      # ─────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/

      # ─────────────────────────────
      # 5️⃣ Формируем краткий отчёт в PR
      # ─────────────────────────────
      - name: 🧾 Prepare short linter summaries
        if: github.event_name == 'pull_request'
        id: summarize
        run: |
          summarize_log() {
            local file="$1"
            local title="$2"
            if [[ -f "$file" && -s "$file" ]]; then
              echo "**${title}**"
              echo '```text'
              head -n 50 "$file"
              echo '```'
              echo ""
            else
              echo "**${title}**"
              echo "_No results or file missing_"
              echo ""
            fi
          }

          {
            echo "## 🧩 Docs-as-Code CI Results"
            summarize_log artifacts/markdownlint.log "Markdown"
            summarize_log artifacts/asciidoc.log "AsciiDoc"
            summarize_log artifacts/openapi.log "OpenAPI"
            summarize_log artifacts/vale.log "Vale"
          } > summary.md

      - name: 💬 Post summary comment to PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-lint
          path: summary.md
          recreate: true
          delete: false
          hide_classify: OUTDATED

    

      # ─────────────────────────────────────────────
      # 6️⃣ Сборка и публикация документации (только при пуше в main)
      # ─────────────────────────────────────────────
  docs-publish:
    name: 🌐 Build & Deploy Docs to GitHub Pages
    runs-on: ubuntu-latest
    needs: docs-validate
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .repo/Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      - name: 🧱 Generate HTML via Doctoolchain
        run: |
          docker run --rm \
            -v "$PWD":/work \
            -w /work \
            docs-cli:ci doctoolchain . generateHTML -PconfigFile=.repo/config/docToolchainConfig.groovy

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/html
          publish_branch: gh-pages
          commit_message: "🚀 Publish docs [skip ci]"
