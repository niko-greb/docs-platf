name: üß© Docs-as-Code CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    name: üìö Validate Documentation
    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Run Docs Validation
        id: run-linters
        run: |
          echo "üßæ Running all linters inside container..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -c '
            echo "‚ñ∂Ô∏è Markdownlint..."
            markdownlint-cli2 "**/*.md" "#node_modules" --format markdown | tee /work/markdownlint.log || true

            echo "‚ñ∂Ô∏è Vale (style check)..."
            vale docs/ | tee /work/vale.log || true

            echo "‚ñ∂Ô∏è Spectral (API specs)..."
            if [ -f "docs/api.yaml" ]; then
              spectral lint docs/api.yaml | tee /work/spectral.log || true
            fi

            echo "‚ñ∂Ô∏è Asciidoctor doctest..."
            if ls docs/*.adoc >/dev/null 2>&1; then
              asciidoctor-doctest docs/*.adoc | tee /work/asciidoctor.log || true
            fi
          '

          # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏
          cat markdownlint.log vale.log spectral.log asciidoctor.log > full-docs-report.log || true
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          cat full-docs-report.log >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: üö® Convert Markdownlint issues to GitHub Warnings
        if: always()
        run: |
          echo "‚öôÔ∏è Processing Markdown warnings..."
          while IFS= read -r line; do
            if [[ "$line" =~ ^docs/.*:[0-9]+ ]]; then
              file=$(echo "$line" | cut -d':' -f1)
              line_num=$(echo "$line" | cut -d':' -f2)
              msg=$(echo "$line" | cut -d':' -f3- | sed "s/^[[:space:]]*//")
              echo "::warning file=$file,line=$line_num::$msg"
            fi
          done < markdownlint.log

      - name: üí¨ Post Docs Quality Report
        if: always() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-quality
          message: |
            üßæ **Docs Quality Report**
            ```
            ${{ steps.run-linters.outputs.summary }}
            ```

      - name: üìé Upload Docs Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-linter-logs
          path: |
            markdownlint.log
            vale.log
            spectral.log
            asciidoctor.log
            full-docs-report.log
