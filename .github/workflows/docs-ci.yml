name: 🧩 Docs-as-Code CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-lint:
    name: 🧱 Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ─────────────────────────────────────────────────────────────
      # MARKDOWN VALIDATION
      # ─────────────────────────────────────────────────────────────
      - name: 🧾 Lint Markdown files
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash -c "markdownlint-cli2 '**/*.md' '#node_modules'"

      # ─────────────────────────────────────────────────────────────
      # ASCIIDOC VALIDATION
      # ─────────────────────────────────────────────────────────────
      - name: 🏗️ Validate AsciiDoc with Asciidoctor Doctest
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash -c "find . -name '*.adoc' -type f -print0 | xargs -0 -n1 asciidoctor-doctest"

      # ─────────────────────────────────────────────────────────────
      # API SPEC VALIDATION
      # ─────────────────────────────────────────────────────────────
      - name: 🔍 Validate OpenAPI specs
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash -c "find . -name '*.yaml' -o -name '*.yml' | grep -i openapi || true | xargs -r -n1 spectral lint"

      # ─────────────────────────────────────────────────────────────
      # STYLE & TONE CHECK
      # ─────────────────────────────────────────────────────────────
      - name: ✍️ Run Vale Style Check
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash -c "vale --minAlertLevel=error . || true"

      

      # ─────────────────────────────────────────────────────────────
      # TESTS
      # ───────────────────────────────────────────────────────────── 

      - name: 🧪 Test valid files (must pass)
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash -c "
              markdownlint-cli2 tests/valid/*.md --config .markdownlint.json &&
              find tests/valid -name '*.adoc' -exec asciidoctor --trace -o /dev/null {} \; &&
              spectral lint tests/valid/*.yaml
            "

      - name: 🧪 Test invalid files (expect lint errors)
        continue-on-error: true
        run: |
          echo "::group::🔍 Запуск тестов на некорректных файлах"

          SUCCESS_COUNT=0
          FAILURE_COUNT=0

          # ─────────────────────────────────────────────────────────
          # Тест 1: markdownlint должен падать на invalid/order-bad.md
          # Ожидаемые ошибки: MD003, MD007, MD047, битая ссылка
          echo "📝 Тест: markdownlint-cli2 должен НАЙТИ ошибки в tests/invalid/order-bad.md"
          if docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            markdownlint-cli2 tests/invalid/order-bad.md --config .markdownlint.json; then
            echo "::warning title=Markdown test FAILED::❌ markdownlint ПРОШЁЛ, но ДОЛЖЕН был упасть!"
            echo "Возможно: правила отключены или файл больше не содержит ошибок."
            ((FAILURE_COUNT++))
          else
            echo "✅ markdownlint корректно обнаружил ошибки (MD003, MD007, MD047, битая ссылка)"
            ((SUCCESS_COUNT++))
          fi

          # ─────────────────────────────────────────────────────────
          # Тест 2: asciidoctor должен падать на invalid/api-bad.adoc
          # Ожидаем: синтаксис заголовка, include, таблица
          echo "🔤 Тест: asciidoctor должен НАЙТИ ошибки в tests/invalid/api-bad.adoc"
          if docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            asciidoctor --trace -o /dev/null tests/invalid/api-bad.adoc; then
            echo "::warning title=AsciiDoc test FAILED::❌ asciidoctor ПРОШЁЛ, но ДОЛЖЕН был упасть!"
            echo "Возможно: файл стал валидным или проверка сломана."
            ((FAILURE_COUNT++))
          else
            echo "✅ asciidoctor корректно обнаружил синтаксические ошибки"
            echo "→ Нарушения: заголовок без пробела, невалидная таблица, include::not-found.adoc[]"
            ((SUCCESS_COUNT++))
          fi

          # ─────────────────────────────────────────────────────────
          # Тест 3: spectral должен падать на invalid/openapi-bad.yaml
          # Ожидаем: YAML-отступ, код ответа без кавычек, GET с телом
          echo "🔍 Тест: spectral должен НАЙТИ ошибки в tests/invalid/openapi-bad.yaml"
          if docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            spectral lint tests/invalid/openapi-bad.yaml; then
            echo "::warning title=OpenAPI test FAILED::❌ spectral ПРОШЁЛ, но ДОЛЖЕН был упасть!"
            echo "Возможно: правила изменены или файл исправлен."
            ((FAILURE_COUNT++))
          else
            echo "✅ spectral корректно обнаружил ошибки в OpenAPI"
            echo "→ Проблемы: неправильный отступ в 'title', код 201 вместо '201', GET с requestBody"
            ((SUCCESS_COUNT++))
          fi

          # ─────────────────────────────────────────────────────────
          # ИТОГ
          echo "✅ Успешных тестов (ожидаемые ошибки найдены): $SUCCESS_COUNT"
          if [ $FAILURE_COUNT -gt 0 ]; then
            echo "::warning title=Health Check Warning::$FAILURE_COUNT тест(а/ов) провалились: линтеры НЕ заметили ошибки!"
          else
            echo "🟢 Все тесты прошли успешно: система контроля качества работает корректно"
          fi

          echo "::endgroup::"

          # Завершаем успешно, даже если были предупреждения
          exit 0

      # ─────────────────────────────────────────────────────────────
      # REPORTING
      # ─────────────────────────────────────────────────────────────
      - name: 📊 Summarize results
        if: always()
        run: echo "✅ Documentation checks completed"
