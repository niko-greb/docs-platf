name: 🧱 Docs-as-Code CI + GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  pull-requests: write  # ← даёт и запись, и чтение

jobs:
  docs-ci:
    name: 🧩 Validate & Publish Documentation
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' }}

    steps:
      # ─────────────────────────────────────────────
      # 1️⃣ Клонируем репозиторий (с историей)
      # ─────────────────────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ─────────────────────────────────────────────
      # 2️⃣ Собираем Docker окружение для линтеров
      # ─────────────────────────────────────────────
      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .repo/Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ─────────────────────────────────────────────
      # 3️⃣ Запускаем линтеры (только по изменённым файлам)
      # ─────────────────────────────────────────────
      - name: 🚀 Run Docs-as-Code Validation
        id: lint
        run: |
          echo "🔍 Detecting changed files..."
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(md|adoc|ya?ml)$' || true)
          else
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep -E '\.(md|adoc|ya?ml)$' || true)
          fi
          echo "$CHANGED_FILES"
          if [ -z "$CHANGED_FILES" ]; then
            echo "✅ No doc changes."
            exit 0
          fi
          docker run --rm -v "$PWD":/work -w /work -e CHANGED_FILES="$CHANGED_FILES" docs-cli:ci \
            bash .repo/ci/scripts/run-linters.sh

      # ─────────────────────────────────────────────
      # 4️⃣ Публикуем отчёты линтеров
      # ─────────────────────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/


      - name: 🧾 Generate PR comment summary
        if: github.event_name == 'pull_request'
        run: |
          summarize() {
            local file="$1"
            local title="$2"
            echo "**${title}**"
            if [[ -f "$file" && -s "$file" ]]; then
              echo '```text'
              head -n 50 "$file"
              echo '```'
            else
              echo "_No issues detected_"
            fi
            echo ""
          }

          {
            echo "## 🧩 Docs-as-Code CI Results"
            echo ""
            summarize artifacts/markdownlint.log "Markdown"
            summarize artifacts/asciidoc.log "AsciiDoc"
            summarize artifacts/openapi.log "OpenAPI"
            summarize artifacts/vale.log "Vale"
          } > summary.md    

      - name: 🔍 Read summary for PR comment
        id: read_summary
        if: github.event_name == 'pull_request'
        run: |
          if [ -f "summary.md" ]; then
            echo "content<<EOF" >> "$GITHUB_OUTPUT"
            cat summary.md >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "content=⚠️ Summary not generated." >> "$GITHUB_OUTPUT"
          fi

      - name: 💬 Post summary comment to PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-lint
          message: ${{ steps.read_summary.outputs.content }}

     



      # ─────────────────────────────────────────────
      # 6️⃣ Генерация HTML и публикация на GitHub Pages
      # ─────────────────────────────────────────────
      - name: 🧱 Generate HTML documentation
        if: github.event_name == 'push'
        run: docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
          doctoolchain . generateHTML -PconfigFile=.repo/config/docToolchainConfig.groovy

      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html5
