# .github/workflows/docs-ci.yml
name: "Docs-as-Code CI (soft mode)"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ PR –∏ –ø—Ä–∏ –ø—É—à–µ –≤ main ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# –ù—É–∂–Ω–æ –¥–∞—Ç—å action'—É –ø—Ä–∞–≤–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ PR
permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validate:
    name: "üìö Validate docs (Markdown / AsciiDoc / OpenAPI / Style)"
    runs-on: ubuntu-latest
    # –ù–ï –ª–æ–º–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö ‚Äî –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ soft mode.
    # –û—à–∏–±–∫–∏ —à–∞–≥–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ (set +e) –∏/–∏–ª–∏ —á–µ—Ä–µ–∑ allow-failure.
    steps:

      # 1) –ó–∞–±–∏—Ä–∞–µ–º –∫–æ–¥
      - name: "üîÅ Checkout repository"
        uses: actions/checkout@v4

      # 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º buildx ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞ (–∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å)
      - name: "üß∞ Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      # 3) –°–æ–±–∏—Ä–∞–µ–º docs-cli –æ–±—Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–µ–º load:true —á—Ç–æ–±—ã –æ–±—Ä–∞–∑ –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –≤ runner.
      #    –ï—Å–ª–∏ build –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –º–æ–∂–Ω–æ –ø—É—à–∏—Ç—å –æ–±—Ä–∞–∑ –≤ GHCR –∏ –±—Ä–∞—Ç—å –æ—Ç—Ç—É–¥–∞.
      - name: "üèóÔ∏è Build docs-cli image"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false      # –Ω–µ –ø—É—à–∏–º –≤ registry
          load: true       # –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π docker daemon runner'–∞
          tags: docs-cli:ci

      # 4) –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      - name: "üìÅ Prepare artifacts dir"
        run: |
          mkdir -p artifacts

      # 5) –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ª–∏–Ω—Ç–µ—Ä–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
      #    scripts/run-linters.sh –¥–æ–ª–∂–µ–Ω:
      #      - –∑–∞–ø—É—Å–∫–∞—Ç—å markdownlint, asciidoctor-doctest, spectral, vale –∏ —Ç.–¥.
      #      - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ artifacts/*.log
      #      - –±—ã—Ç—å –≤ soft-mode (–Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö): set +e –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
      - name: "üß™ Run all linters (in container)"
        id: run_linters
        run: |
          set -o pipefail || true
          echo "üß© Running linters through scripts/run-linters.sh (inside container docs-cli:ci)"
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç.
          # –í–∞–∂–Ω–æ: –≤—ã–≤–æ–¥ –¥—É–±–ª–∏—Ä—É–µ–º –Ω–∞ stdout (tee), —á—Ç–æ–±—ã –ª–æ–≥ –≤–∏–¥–µ–ª runner.
          docker run --rm \
            -v "${{ github.workspace }}":/work \
            -w /work \
            docs-cli:ci bash -lc "chmod +x scripts/run-linters.sh && scripts/run-linters.sh" \
            2>&1 | tee artifacts/run-linters.log || true

      # 6) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å markdownlint-–ª–æ–≥ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ path:line:msg –≤ ::warning
      #    –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–∏–º—ã–µ warning-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ Checks.
      - name: "‚ö†Ô∏è Convert linter lines to GitHub warnings (annotations)"
        if: always()
        run: |
          echo "üîç Parsing artifacts for warn-able patterns..."
          # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã, –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ path:line:message (—Ç–∏–ø–∏—á–Ω—ã–π markdownlint)
          # –∏ –≤—ã–≤–æ–¥–∏–º GitHub-style annotations.
          # –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—á–∞—Ç–∞—Ç—å—Å—è –≤ stdout –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ: ::warning file=...,line=...::msg
          set +e
          grep -hE "^[^ ]+:[0-9]+:" artifacts/*.log || true \
            | while IFS= read -r line ; do
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å: path –∏ line (path:line:rest)
                file=$(echo "$line" | cut -d: -f1)
                ln=$(echo "$line" | cut -d: -f2)
                msg=$(echo "$line" | cut -d: -f3- | sed 's/"/\\"/g' )
                # –ü–µ—á–∞—Ç–∞–µ–º warning ‚Äî —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –≤ Checks
                echo "::warning file=${file},line=${ln}::${msg}"
              done

      # 7) –°–æ–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –ª–æ–≥ (–≤—Å–µ–≥–¥–∞)
      - name: "üì¶ Merge logs into docs-quality.log"
        if: always()
        run: |
          mkdir -p artifacts
          # –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–æ–≤ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å –ø–æ–º–µ—Ç–∫–æ–π "no warnings"
          if ls artifacts/*.log >/dev/null 2>&1; then
            cat artifacts/*.log > artifacts/docs-quality.log || true
          else
            echo "‚úÖ No logs generated" > artifacts/docs-quality.log
          fi
          echo "üóÇ artifacts/docs-quality.log size: $(stat -c%s artifacts/docs-quality.log || true)"

      # 8) –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç (–≤—Å–µ–≥–¥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞—á–∞—Ç—å)
      - name: "üìé Upload docs-quality report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/docs-quality.log
          if-no-files-found: warn

      # 9) –ü–∏—à–µ–º –∫—Ä–∞—Ç–∫–∏–π summary (Checks ‚Üí Summary), —á—Ç–æ–±—ã –ª—é–¥–∏ –≤–∏–¥–µ–ª–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      - name: "üìù Write GitHub Step Summary (short)"
        if: always()
        run: |
          echo "## üßæ Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã MD, Vale, Spectral)
          grep -E "MD[0-9]{3}|Vale|Spectral|ERROR|WARN|Error|warning" artifacts/docs-quality.log | head -n 200 || echo "‚úÖ No warnings found"
          echo '```' >> $GITHUB_STEP_SUMMARY

      # 10) –û—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º sticky-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è pull_request)
      - name: "üí¨ Post results as sticky PR comment"
        if: always() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-ci-report
          message: |
            üßæ **Documentation CI Report**
            ```
            $(cat artifacts/docs-quality.log || echo "‚úÖ No warnings found")
            ```

      # 11) –î–æ–ø. —Å–æ–≤–µ—Ç: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π step, —á—Ç–æ–±—ã fail CI if critical errors found
      #     (–Ω–µ –≤–∫–ª—é—á—ë–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å soft-mode; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤–∫–ª—é—á–∏)
      # - name: "‚ùó Fail on critical"
      #   if: always()
      #   run: |
      #     if grep -q "CRITICAL" artifacts/docs-quality.log; then
      #       echo "Found CRITICAL issues; failing the job."
      #       exit 1
      #     fi

