name: 🧱 Docs-as-Code CI (Soft Mode)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validate:
    name: 🧩 Validate Documentation
    runs-on: ubuntu-latest
    continue-on-error: true  # мягкий режим

    steps:
      # ─────────────────────────────────────────────
      # 1️⃣ Инициализация и сборка образа
      # ─────────────────────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ─────────────────────────────────────────────
      # 2️⃣ Markdown Linter + mdformat
      # ─────────────────────────────────────────────
      - name: 🧾 Run Markdown and Format Linters
        run: |
          mkdir -p artifacts
          echo "🧾 Running Markdown Linter..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            echo "📂 Working dir: $(pwd)"
            markdownlint-cli2 "**/*.md" "#node_modules" "#.git" "#.github" "#artifacts" "#scripts" "#.vale" --format markdown | tee artifacts/markdownlint.log || true
            echo "✅ Markdown lint finished"
            mdformat --check . 2>&1 | tee -a artifacts/mdformat.log || true
          '

      # ─────────────────────────────────────────────
      # 3️⃣ AsciiDoctor Doctest
      # ─────────────────────────────────────────────
      - name: 🏗️ Validate AsciiDoc
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            FILES=$(find . -type f -name "*.adoc" | wc -l)
            if [ "$FILES" -eq 0 ]; then
              echo "⚠️ No AsciiDoc files found" | tee artifacts/asciidoc.log
              exit 0
            fi
            find . -type f -name "*.adoc" -not -path "./.github/*" -not -path "./.git/*" | xargs -n1 asciidoctor-doctest 2>&1 | tee -a artifacts/asciidoc.log || true
          '

      # ─────────────────────────────────────────────
      # 4️⃣ OpenAPI Validation (Spectral)
      # ─────────────────────────────────────────────
      - name: 🔍 Validate OpenAPI specs
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            FILES=$(find . -type f \( -name "*.yaml" -o -name "*.yml" \) -not -path "./.github/*" -not -path "./.git/*" | wc -l)
            if [ "$FILES" -eq 0 ]; then
              echo "⚠️ No OpenAPI YAML files found" | tee artifacts/openapi.log
              exit 0
            fi
            find . -type f \( -name "*.yaml" -o -name "*.yml" \) -not -path "./.github/*" -not -path "./.git/*" -print0 | xargs -0 -n1 spectral lint --quiet 2>&1 | tee -a artifacts/openapi.log || true
          '

      # ─────────────────────────────────────────────
      # 5️⃣ Vale Style Checker
      # ─────────────────────────────────────────────
      - name: ✍️ Run Vale Style Checks
        run: |
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci bash -lc '
            if [ ! -d ".vale/styles" ]; then
              echo "⚙️ Syncing Vale styles..."
              vale sync
            fi
            vale --output=line --minAlertLevel=warning . 2>&1 | tee artifacts/vale.log || true
          '

      # ─────────────────────────────────────────────
      # 6️⃣ Отчёт и обратная связь в PR
      # ─────────────────────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/

      - name: 💬 Comment Summary in PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Docs-as-Code CI Report
          message: |
            🧾 **Docs-as-Code CI Report**
            > Markdown, AsciiDoc, OpenAPI, Vale — checked ✅
            ```bash
            $(cat artifacts/markdownlint.log 2>/dev/null || echo "No markdown log")
            $(cat artifacts/openapi.log 2>/dev/null || echo "No openapi log")
            $(cat artifacts/vale.log 2>/dev/null || echo "No vale log")
            ```
