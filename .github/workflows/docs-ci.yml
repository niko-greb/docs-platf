name: 🧱 Docs-as-Code CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validate:
    name: 🧩 Validate Documentation
    runs-on: ubuntu-latest

    # 💡 Автоматический выбор режима:
    # - при pull_request → мягкий (continue-on-error: true)
    # - при push → строгий (continue-on-error: false)
    continue-on-error: ${{ github.event_name == 'pull_request' }}

    steps:
      # ─────────────────────────────────────────────
      # 1️⃣ Клонируем репозиторий
      # ─────────────────────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────
      # 2️⃣ Подготавливаем Docker окружение
      # ─────────────────────────────────────────────
      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ─────────────────────────────────────────────
      # 3️⃣ Запускаем общий валидатор (run-linters.sh)
      # ─────────────────────────────────────────────
      - name: 🚀 Run Docs-as-Code Validation
        run: |
          echo "🔧 Starting Docs-as-Code Validation..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash ./scripts/run-linters.sh

      # ─────────────────────────────────────────────
      # 4️⃣ Публикуем артефакты (логи линтеров)
      # ─────────────────────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/

      - name: 🔎 Read linter logs into step outputs
        id: read_logs
        shell: bash
        run: |
          mkdir -p artifacts

          # helper: read file safely, limit size (head), convert to safe block
          read_log() {
            local file="$1"
            local max_lines="${2:-200}"
            if [ -f "$file" ] && [ -s "$file" ]; then
              # take head to limit size, then escape backticks (and make sure %0A used only if needed)
              head -n "$max_lines" "$file" \
                | sed -e 's/`/\\`/g' -e 's/\r$//' \
                > /tmp/trimmed.log
              # wrap in code fence markers later; emit as multiline output
              echo "-----BEGIN_LOG-----"
              cat /tmp/trimmed.log
              echo "-----END_LOG-----"
            else
              echo "No file: $file or file empty"
            fi
          }

          echo "Reading markdownlint..."
          md_block="$(read_log artifacts/markdownlint.log 200)"
          echo "markdown<<EOF" >> "$GITHUB_OUTPUT"
          echo "$md_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "Reading openapi..."
          openapi_block="$(read_log artifacts/openapi.log 200)"
          echo "openapi<<EOF" >> "$GITHUB_OUTPUT"
          echo "$openapi_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "Reading vale..."
          vale_block="$(read_log artifacts/vale.log 200)"
          echo "vale<<EOF" >> "$GITHUB_OUTPUT"
          echo "$vale_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
    

      # ─────────────────────────────────────────────
      # 5️⃣ Комментарий в Pull Request
      # ─────────────────────────────────────────────
      - name: 💬 Comment Summary in PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🧾 Docs-as-Code CI Report"
          message: |
            🧱 **Docs-as-Code CI completed**
            Mode: ${{ github.event_name == 'pull_request' && 'Soft (non-blocking)' || 'Strict (blocking)' }}

            ✅ Markdown, AsciiDoc, OpenAPI, Vale — checked.
            🧩 Review detailed results in attached artifacts.

            ---
            📋 **Quick Summary (trimmed, head only)**
            **Markdownlint**
            ```text
            ${{ steps.read_logs.outputs.markdown }}
            ```

            **OpenAPI (Spectral)**
            ```text
            ${{ steps.read_logs.outputs.openapi }}
            ```

            **Vale**
            ```text
            ${{ steps.read_logs.outputs.vale }}
            ```

