name: 🧱 Docs-as-Code CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validate:
    name: 🧩 Validate Documentation
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name == 'pull_request' }}

    steps:
      # ─────────────────────────────────────────────
      #  Пре-коммит (НАПОДУМАТЬ)
      # ─────────────────────────────────────────────
      # - name: 🔍 Validate pre-commit hooks
      #   run: |
      #     pip install pre-commit
      #     pre-commit run --all-files --show-diff-on-failure


      # ─────────────────────────────────────────────
      # 1️⃣ Инициализация
      # ─────────────────────────────────────────────
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ─────────────────────────────────────────────
      # 2️⃣ Сборка контейнера с CLI
      # ─────────────────────────────────────────────
      - name: 🏗️ Build docs-cli image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .repo/Dockerfile
          push: false
          load: true
          tags: docs-cli:ci

      # ─────────────────────────────────────────────
      # 3️⃣ Запуск линтеров в контейнере
      # ─────────────────────────────────────────────
      - name: 🚀 Run Docs-as-Code Validation
        run: |
          echo "🔧 Starting Docs-as-Code Validation..."
          docker run --rm -v "$PWD":/work -w /work docs-cli:ci \
            bash .repo/ci/scripts/run-linters.sh

      # ─────────────────────────────────────────────
      # 4️⃣ Сохраняем артефакты
      # ─────────────────────────────────────────────
      - name: 📎 Upload Linter Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-report
          path: artifacts/

      # ─────────────────────────────────────────────
      # 5️⃣ Фильтр изменённых файлов
      # ─────────────────────────────────────────────
      - name: 🎨 Annotate PR (only changed files)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "🧠 Gathering changed files in PR..."
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
          git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD > changed_files.txt

          echo "📄 Changed files:"
          cat changed_files.txt || echo "⚠️ No changes detected."

          echo "🧩 Parsing linter logs for annotations..."
          for log in artifacts/*.log; do
            [ -f "$log" ] || continue
            echo "Processing $log..."
            while IFS= read -r line; do
              if [[ "$line" =~ ^([^:]+):([0-9]+):[[:space:]]*(.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                message="${BASH_REMATCH[3]}"
                # Пропускаем файлы, не входящие в изменённые
                if ! grep -qx "$file" changed_files.txt 2>/dev/null; then
                  continue
                fi
                # Определяем тип (warning/error)
                if echo "$message" | grep -qiE "error|failed|missing"; then
                  echo "::error file=${file},line=${line_number}::${message}"
                else
                  echo "::warning file=${file},line=${line_number}::${message}"
                fi
              fi
            done < "$log"
          done

          echo "✅ Annotation completed for changed files only."

      # ─────────────────────────────────────────────
      # 6️⃣ Читаем trimmed логи
      # ─────────────────────────────────────────────
      - name: 🔎 Read linter logs into step outputs
        id: read_logs
        shell: bash
        run: |
          mkdir -p artifacts

          read_log() {
            local file="$1"
            local max_lines="${2:-200}"
            if [ -f "$file" ] && [ -s "$file" ]; then
              head -n "$max_lines" "$file" \
                | sed -e 's/`/\\`/g' -e 's/\r$//' \
                > /tmp/trimmed.log
              echo "-----BEGIN_LOG-----"
              cat /tmp/trimmed.log
              echo "-----END_LOG-----"
            else
              echo "No file: $file or file empty"
            fi
          }

          echo "Reading markdownlint..."
          md_block="$(read_log artifacts/markdownlint.log 200)"
          echo "markdown<<EOF" >> "$GITHUB_OUTPUT"
          echo "$md_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "Reading openapi..."
          openapi_block="$(read_log artifacts/openapi.log 200)"
          echo "openapi<<EOF" >> "$GITHUB_OUTPUT"
          echo "$openapi_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "Reading vale..."
          vale_block="$(read_log artifacts/vale.log 200)"
          echo "vale<<EOF" >> "$GITHUB_OUTPUT"
          echo "$vale_block" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # ─────────────────────────────────────────────
      # 7️⃣ Автоматический комментарий в PR
      # ─────────────────────────────────────────────
      - name: 💬 Comment Summary in PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "🧾 Docs-as-Code CI Report"
          message: |
            ## 🧱 **Docs-as-Code CI Summary**
            **Mode:** ${{ github.event_name == 'pull_request' && '🩶 Soft (non-blocking)' || '🔥 Strict (blocking)' }}

            ✅ **Markdown**, 🏗️ **AsciiDoc**, 🔍 **OpenAPI**, ✍️ **Vale** — checked.

            ---
            ### 📋 Quick Summary (first 200 lines)
            **🧾 Markdownlint**
            ```diff
            ${{ steps.read_logs.outputs.markdown }}
            ```

            **🔍 OpenAPI (Spectral)**
            ```diff
            ${{ steps.read_logs.outputs.openapi }}
            ```

            **✍️ Vale**
            ```diff
            ${{ steps.read_logs.outputs.vale }}
            ```

            ---
            📦 _Full reports available in build artifacts (docs-quality-report)_.
