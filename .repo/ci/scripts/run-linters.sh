#!/usr/bin/env bash
set -euo pipefail

# ===================================================================
# üß© Docs-as-Code Linter Orchestrator
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
# –ö–æ–Ω—Ñ–∏–≥–∏ –ª–µ–∂–∞—Ç –≤ .repo/config/
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI –∏ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–µ.
# ===================================================================

SOFT_MODE=true   # true ‚Äî –º—è–≥–∫–∏–π —Ä–µ–∂–∏–º (CI –Ω–µ –ø–∞–¥–∞–µ—Ç)
mkdir -p artifacts
RUN_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
exit_code=0

echo "==============================================================="
echo "üß© Starting Docs-as-Code Validation (Soft Mode: ${SOFT_MODE})"
echo "üìÖ Run: ${RUN_TIMESTAMP}"
echo "üìÇ Working dir: $(pwd)"
echo "==============================================================="

# -----------------------------
# üß± –ü—É—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
# -----------------------------
REPO_CONFIG_DIR=".repo/config"
REPO_SCRIPTS_DIR=".repo/ci/scripts"
VALE_CONFIG="${REPO_CONFIG_DIR}/.vale.ini"
MARKDOWNLINT_CONFIG="${REPO_CONFIG_DIR}/.markdownlint-cli2.jsonc"
SPECTRAL_CONFIG="${REPO_CONFIG_DIR}/.spectral.yaml"
VALE_STYLES_DIR="${REPO_CONFIG_DIR}/.vale/styles"

# -----------------------------
# üì¶ –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
# -----------------------------
FILES=()

# 1Ô∏è‚É£ –ò–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$#" -gt 0 ]; then
  FILES=("$@")
# 2Ô∏è‚É£ –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
elif [ -n "${CHANGED_FILES:-}" ]; then
  mapfile -t FILES < <(echo "$CHANGED_FILES" | tr '\r' '\n' | sed '/^$/d')
# 3Ô∏è‚É£ –§–æ–ª–±—ç–∫ ‚Äî –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
else
  mapfile -t FILES < <(find docs . -type f \( -name "*.md" -o -name "*.adoc" -o -name "*.yaml" -o -name "*.yml" \) \
    -not -path "./.git/*" -not -path "./.github/*" -not -path "./.repo/*" -not -path "./artifacts/*")
fi

GOOD_FILES=()
for f in "${FILES[@]}"; do
  f="${f#./}"
  [[ -f "$f" ]] || continue
  case "$f" in
    *.md|*.adoc|*.yml|*.yaml) GOOD_FILES+=("$f") ;;
  esac
done

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—á—Ç–æ–±—ã –ª–∏–Ω—Ç–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å –¥–≤–∞–∂–¥—ã –Ω–∞ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–∞—Ö)
mapfile -t GOOD_FILES < <(printf "%s\n" "${GOOD_FILES[@]}" | sort -u)

if [ ${#GOOD_FILES[@]} -eq 0 ]; then
  echo "‚ÑπÔ∏è No relevant documentation files to lint. Exiting."
  exit 0
fi

echo "üìã Files to check (${#GOOD_FILES[@]}):"
for f in "${GOOD_FILES[@]}"; do echo " - $f"; done
echo ""

# ===================================================================
# 1Ô∏è‚É£ Markdownlint
# ===================================================================
echo "üßæ Running Markdown Linter..."
MD_FILES=($(printf "%s\n" "${GOOD_FILES[@]}" | grep -E '\.md$' || true))

if [ ${#MD_FILES[@]} -gt 0 ]; then
  config_arg=()
  [ -f "$MARKDOWNLINT_CONFIG" ] && config_arg=(--config "$MARKDOWNLINT_CONFIG")
  markdownlint-cli2 "${config_arg[@]}" "${MD_FILES[@]}" --fix false 2>&1 | tee artifacts/markdownlint.log || true
else
  echo "‚ö†Ô∏è No Markdown files found." | tee artifacts/markdownlint.log
fi
echo ""

# ===================================================================
# 2Ô∏è‚É£ mdformat (Markdown formatting)
# ===================================================================
echo "üé® Checking Markdown formatting (mdformat)..."
if command -v mdformat >/dev/null 2>&1; then
  for f in "${MD_FILES[@]}"; do
    mdformat --check "$f" 2>&1 | tee -a artifacts/mdformat.log || true
  done
else
  echo "‚ö†Ô∏è mdformat not installed. Skipping." | tee artifacts/mdformat.log
fi
echo ""

# ===================================================================
# 3Ô∏è‚É£ AsciiDoc validation
# ===================================================================
echo "üèóÔ∏è Running AsciiDoc validation..."
ADOC_FILES=($(printf "%s\n" "${GOOD_FILES[@]}" | grep -E '\.adoc$' || true))

if [ ${#ADOC_FILES[@]} -gt 0 ]; then
  echo "# AsciiDoc Validation Log (${RUN_TIMESTAMP})" > artifacts/asciidoc.log

  for f in "${ADOC_FILES[@]}"; do
    echo "üìÑ Checking $f ..."
    output=$(asciidoctor --trace --failure-level WARN -o /dev/null "$f" 2>&1 || true)

    if echo "$output" | grep -qE "(: ERROR|: FAILED)"; then
      echo "‚ùå $f ‚Üí ERROR(s) found!"
      echo "$output" | grep -E "(: ERROR|: FAILED)" | tee -a artifacts/asciidoc.log
      exit_code=1
    elif echo "$output" | grep -qE "(: WARNING|: WARN)"; then
      echo "‚ö†Ô∏è  $f ‚Üí warning(s) found."
      echo "$output" | grep -E "(: WARNING|: WARN)" | tee -a artifacts/asciidoc.log
    else
      echo "‚úÖ $f passed"
    fi
  done
else
  echo "‚ö†Ô∏è No AsciiDoc files found." | tee artifacts/asciidoc.log
fi
echo ""

# ===================================================================
# 4Ô∏è‚É£ OpenAPI validation (Spectral)
# ===================================================================
echo "üîç Running Spectral (OpenAPI)..."
YAML_FILES=($(printf "%s\n" "${GOOD_FILES[@]}" | grep -E '\.ya?ml$' || true))

if [ ${#YAML_FILES[@]} -gt 0 ]; then
  for f in "${YAML_FILES[@]}"; do
    if [ -f "$SPECTRAL_CONFIG" ]; then
      spectral lint --ruleset "$SPECTRAL_CONFIG" "$f" 2>&1 | tee -a artifacts/openapi.log || true
    else
      spectral lint "$f" 2>&1 | tee -a artifacts/openapi.log || true
    fi
  done
else
  echo "‚ö†Ô∏è No OpenAPI YAML files found." | tee artifacts/openapi.log
fi
echo ""

# ===================================================================
# 5Ô∏è‚É£ Vale Style & Terminology
# ===================================================================
echo "‚úçÔ∏è Running Vale..."
if [ ! -d "$VALE_STYLES_DIR" ]; then
  echo "‚öôÔ∏è Syncing Vale styles..."
  vale sync || true
fi

if command -v vale >/dev/null 2>&1; then
  vale --config "$VALE_CONFIG" --output=line --minAlertLevel=warning "${GOOD_FILES[@]}" 2>&1 | tee artifacts/vale.log || true
else
  echo "‚ö†Ô∏è Vale not found. Skipping style check." | tee artifacts/vale.log
fi
echo ""

# ===================================================================
# 6Ô∏è‚É£ GitHub Annotations
# ===================================================================
echo "üìã Generating GitHub annotations..."
for log in artifacts/*.log; do
  [ -f "$log" ] || continue
  [ -s "$log" ] || continue

  # –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ (file:line:msg) –∏ asciidoctor (file: line N: msg)
  grep -hE "^[^[:space:]]+:[0-9]+:" "$log" || \
  grep -hE "^[^[:space:]]+.*line[[:space:]]+[0-9]+:" "$log" || true | while IFS= read -r line; do
    file=""
    ln=""
    msg=""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Asciidoctor: "asciidoctor: ERROR: docs/file.adoc: line 3: message"
    if [[ "$line" =~ ([^:]+\.adoc):[[:space:]]*line[[:space:]]*([0-9]+):(.*) ]]; then
      file="${BASH_REMATCH[1]}"
      ln="${BASH_REMATCH[2]}"
      msg="${BASH_REMATCH[3]}"
    # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç file:line:msg
    elif [[ "$line" =~ ^([^:]+):([0-9]+):(.*)$ ]]; then
      file="${BASH_REMATCH[1]}"
      ln="${BASH_REMATCH[2]}"
      msg="${BASH_REMATCH[3]}"
    fi

    msg=$(echo "$msg" | sed 's/"/\\"/g')

    if echo "$msg" | grep -qi "error"; then
      echo "::error file=${file},line=${ln}::${msg}"
      exit_code=1
    else
      echo "::warning file=${file},line=${ln}::${msg}"
    fi
  done
done

# ===================================================================
# 7Ô∏è‚É£ –ò—Ç–æ–≥
# ===================================================================
if [ "$exit_code" -ne 0 ]; then
  echo "‚ö†Ô∏è Validation finished with issues. Check artifacts/*.log"
else
  echo "‚úÖ Validation successful: no blocking issues found."
fi

echo "üìÇ Artifacts stored in /artifacts/"
if [ "${SOFT_MODE}" = true ]; then
  echo "ü©∂ Soft mode enabled: exiting 0 (non-blocking)"
  exit 0
else
  exit "${exit_code}"
fi
